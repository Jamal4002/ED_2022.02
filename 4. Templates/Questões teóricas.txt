1. Template é um recurso de C++ que permite que funções e classes operem com tipos primitivos diferentes. Assim implementa-se apenas uma única função/classe como template e, a partir dessa, é "gerado" a mesma implementação para o tipo primitivo de cada chamada.

2. Definitivamente, o uso de templates é um recurso poderoso para "economizar" linhas de código e implementações repetitivas. No entanto, é destacável que a operação com ponteiros não é otimizada para esta funcionalidade, pois, de qualquer forma, é necessário implementar dois templates distintos (um para ponteiro e outro para não ponteiro) a fim de obter, por exemplo, a soma de um vetor, visto que, a operação de dados entre tipos ponteiros e tipos não ponteiros é implementada de forma diferente e o recurso de template não abrange esse problema. Todavia, vale mais criar apenas dois templates do que várias funções/classes para cada tipo.